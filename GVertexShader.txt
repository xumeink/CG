#version 400 core

in vec3 inPos;
in vec4 inColor;
in vec3 inNormal;

out vec4 vColor;

uniform mat4 model;
uniform mat4 view;
uniform mat4 proj;
uniform vec3 pointLightPos;
uniform vec3 pointLightColor;
uniform vec3 directLightDir;
uniform vec3 directLightColor;

void main()
{
    vec4 vPos = vec4(inPos, 1.0);
    vPos = proj * view * model * vPos;
    
    vec3 tNormal = normalize(mat3(transpose(inverse(model))) * inNormal);
    
    vec3 pointLightDir = normalize(pointLightPos - vPos.xyz);
    float pointDiffuseStrength = max(dot(pointLightDir, tNormal), 0.0);
    vec3 pointDiffuse = pointDiffuseStrength * pointLightColor;
    
    float directDiffuseStrength = max(dot(-directLightDir, tNormal), 0.0);
    vec3 directDiffuse = directDiffuseStrength * directLightColor;

    vec3 reflectedLight = reflect(-pointLightDir, tNormal);
    float specularStrength = pow(max(dot(reflectedLight, normalize(vec3(0, 0, 1))), 0.0), 32.0);
    vec3 specular = specularStrength * vec3(1, 1, 1);
    
    vColor = vec4(inColor.rgb * (pointDiffuse + directDiffuse) + specular, inColor.a);
    
    gl_Position = vPos;
}