#version 400 core

in vec3 vPos;
in vec3 vNormal;
in vec4 vColor;

out vec4 fColor;

uniform vec3 pointLightPos;
uniform vec3 pointLightColor;
uniform vec3 directLightDir;
uniform vec3 directLightColor;
uniform vec3 viewPos; 

void main()
{
    vec3 norm = normalize(vNormal);
    
    vec3 ambient = 0.1 * vColor.rgb;

    vec3 lightDir = normalize(pointLightPos - vPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * pointLightColor;

    vec3 viewDir = normalize(viewPos - vPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
    vec3 specular = spec * vec3(1.0, 1.0, 1.0);

    vec3 dirLightDir = normalize(-directLightDir);
    float dirDiff = max(dot(norm, dirLightDir), 0.0);
    vec3 dirDiffuse = dirDiff * directLightColor;

    vec3 dirReflectDir = reflect(-dirLightDir, norm);
    float dirSpec = pow(max(dot(viewDir, dirReflectDir), 0.0), 32.0);
    vec3 dirSpecular = dirSpec * vec3(1.0, 1.0, 1.0);

    vec3 lighting = ambient + (diffuse + dirDiffuse) * vColor.rgb + (specular + dirSpecular);
    
    fColor = vec4(lighting, vColor.a);
}
